// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// image_Compression
arma::mat image_Compression(arma::mat img, int num);
RcppExport SEXP _SIR_image_Compression(SEXP imgSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    rcpp_result_gen = Rcpp::wrap(image_Compression(img, num));
    return rcpp_result_gen;
END_RCPP
}
// image_Edging
arma::mat image_Edging(arma::mat img);
RcppExport SEXP _SIR_image_Edging(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(image_Edging(img));
    return rcpp_result_gen;
END_RCPP
}
// image_Sharpening
arma::mat image_Sharpening(arma::mat img);
RcppExport SEXP _SIR_image_Sharpening(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(image_Sharpening(img));
    return rcpp_result_gen;
END_RCPP
}
// randomEncryption
Rcpp::List randomEncryption(arma::mat img);
RcppExport SEXP _SIR_randomEncryption(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(randomEncryption(img));
    return rcpp_result_gen;
END_RCPP
}
// randomDecryption
arma::mat randomDecryption(arma::mat img, arma::Mat<int> key);
RcppExport SEXP _SIR_randomDecryption(SEXP imgSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int> >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(randomDecryption(img, key));
    return rcpp_result_gen;
END_RCPP
}
// simpleEncryption
arma::mat simpleEncryption(arma::mat source, arma::mat mask, double percent);
RcppExport SEXP _SIR_simpleEncryption(SEXP sourceSEXP, SEXP maskSEXP, SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< double >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(simpleEncryption(source, mask, percent));
    return rcpp_result_gen;
END_RCPP
}
// simpleDecryption
arma::mat simpleDecryption(arma::mat img, arma::mat mask, double percent);
RcppExport SEXP _SIR_simpleDecryption(SEXP imgSEXP, SEXP maskSEXP, SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< double >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(simpleDecryption(img, mask, percent));
    return rcpp_result_gen;
END_RCPP
}
// simpleEnhancement
arma::mat simpleEnhancement(arma::mat img, double k, double b);
RcppExport SEXP _SIR_simpleEnhancement(SEXP imgSEXP, SEXP kSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type img(imgSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(simpleEnhancement(img, k, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SIR_image_Compression", (DL_FUNC) &_SIR_image_Compression, 2},
    {"_SIR_image_Edging", (DL_FUNC) &_SIR_image_Edging, 1},
    {"_SIR_image_Sharpening", (DL_FUNC) &_SIR_image_Sharpening, 1},
    {"_SIR_randomEncryption", (DL_FUNC) &_SIR_randomEncryption, 1},
    {"_SIR_randomDecryption", (DL_FUNC) &_SIR_randomDecryption, 2},
    {"_SIR_simpleEncryption", (DL_FUNC) &_SIR_simpleEncryption, 3},
    {"_SIR_simpleDecryption", (DL_FUNC) &_SIR_simpleDecryption, 3},
    {"_SIR_simpleEnhancement", (DL_FUNC) &_SIR_simpleEnhancement, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SIR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
